<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 * @see        Manager
 */
require_once('Manager.php');

class CommentManager extends Manager 
{

	/**
	 * 
	 * @var 
	 * @access private
	 */
	private  $_db;


	/**
	 * Connexion avec la base de données
	 * @access public
	 * @param PDO $db 
	 * @return void
	 */

	public function __construct() 
	{
		$this->_db = $this->dbConnect();
	}


	/**
	 * Liste des commentaires
	 * @access public
	 * @return array
	 */

	public function getCommentsList($idPost, $pageCom) 
	{
		$comments = [];
		$req = $this->_db->prepare('SELECT idComment, postsId, author, content, DATE_FORMAT(dateCreation, "le %d/%m/%Y à %Hh%imin%ss") AS dateCreation, warning FROM comments WHERE postsId = :postsId ORDER BY dateCreation DESC LIMIT ' . ($pageCom - 1) * 10 . ', 10');
		$req->execute(array('postsId' => $idPost));
		while ($datas = $req->fetch()) 
		{
			$comments[] = new Comment($datas);
		}

		return $comments;
	}

	/**
	 * Nombre de commentaires rattachés à un billet
	 * @access public
	 * @return int
	 */

	public function countComments($id) 
	{
		$req = $this->_db->prepare('SELECT COUNT(*) AS nbComments FROM comments WHERE postsId = :postsId');
		$req->execute(array('postsId' => $id));
		$nbComments = $req->fetch()['nbComments'];

		return $nbComments;
	}

	/**
	 * Ajouter un commentaire
	 * @access public
	 * @param Comment $comment 
	 * @return void
	 */

	public function addComment(Comment $comment) 
	{
		$req = $this->_db->prepare('INSERT INTO comments(postsId, author, content, dateCreation, warning) VALUES(:postsId, :author, :content, NOW(), 0)');
		$req->execute(array(
			'postsId' => $comment->postsId(),
			'author'  => $comment->author(),
			'content' => $comment->content()
		));
	}


	/**
	 * Supprimer un commentaire
	 * @access public
	 * @param int $id 
	 * @return void
	 */

	public function deleteComment($id) 
	{
		$this->_db->exec('DELETE FROM comments WHERE idComment = ' . $id);
	}


	/**
	 * Signaler un commentaire
	 * @access public
	 * @param int $id 
	 * @return void
	 */

	public function warnComment($warning, $idComment) 
	{
		$req = $this->_db->prepare('UPDATE comments SET warning = :warning WHERE idComment = :idComment');
		$req->execute(array(
			'warning'	=> $warning += 1,
			'idComment' => $idComment
		));

	}
	/**
	 * Nombre de commentairessignalés
	 * @access public
	 * @return int
	 */
	public function countWarnedComments() 
	{
		$req = $this->_db->query('SELECT COUNT(*) AS nbComments FROM comments WHERE warning > 0');
		$nbComments = $req->fetch()['nbComments'];

		return $nbComments;
	}


	/**
	 * Liste des commentaires signalés
	 * @access public
	 * @return array
	 */

	public function getWarnedCommentsList() 
	{
		$warnedComments = [];

		$req = $this->_db->query('SELECT idComment, postsId, author, content, DATE_FORMAT(dateCreation, "le %d/%m/%Y à %Hh%imin%ss") AS dateCreation, warning FROM comments WHERE warning > 0 ORDER BY warning DESC');
		while($datas = $req->fetch())
		{
			$warnedComments[] = new Comment($datas);
		}
		
		return $warnedComments;
	}


	/**
	 * Lever le signalement d'un commentaire (remet warning à 0)
	 * @access public
	 * @param int $id 
	 * @return void
	 */

	public function deleteWarning($id) 
	{
		$req = $this->_db->prepare('UPDATE comments SET warning = :warning WHERE idComment = :idComment');
		$req->execute(array(
			'warning'	=> 0,
			'idComment' => $id
		));
	}

	public function deletePostCommentsList($idPost)
	{
		$this->_db->exec('DELETE FROM comments WHERE postsId = '. $idPost);
	}

}
